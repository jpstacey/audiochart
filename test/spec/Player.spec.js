// Generated by CoffeeScript 1.6.2
(function() {
  var BaseFakeDataSource, FakeSounder, LongFakeDataSource, ShortFakeDataSource, ac, mixin_data_source,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof exports !== "undefined" && exports !== null) {
    ac = require('../audiochart');
  } else {
    ac = window;
  }

  BaseFakeDataSource = (function() {
    function BaseFakeDataSource() {}

    BaseFakeDataSource.prototype.num_series = function() {
      return 1;
    };

    BaseFakeDataSource.prototype.series_names = function() {
      return ['Test'];
    };

    BaseFakeDataSource.prototype.series_value = function(series, index) {
      return this.fakedata[index];
    };

    return BaseFakeDataSource;

  })();

  ShortFakeDataSource = (function(_super) {
    __extends(ShortFakeDataSource, _super);

    function ShortFakeDataSource(data) {
      this.data = data;
      this.fakedata = [2, 3, 3, 4];
    }

    ShortFakeDataSource.prototype.series_length = function(series) {
      return 4;
    };

    return ShortFakeDataSource;

  })(BaseFakeDataSource);

  LongFakeDataSource = (function(_super) {
    __extends(LongFakeDataSource, _super);

    function LongFakeDataSource(data) {
      this.data = data;
      this.fakedata = [2, 3, 3, 4];
    }

    LongFakeDataSource.prototype.series_length = function(series) {
      return 100;
    };

    return LongFakeDataSource;

  })(BaseFakeDataSource);

  FakeSounder = (function() {
    function FakeSounder() {}

    FakeSounder.prototype.frequency = function(frequency, offset) {};

    FakeSounder.prototype.start = function() {};

    FakeSounder.prototype.stop = function() {};

    return FakeSounder;

  })();

  mixin_data_source = function(msg, data_source_class, interval, call_count) {
    return describe(msg, function() {
      var fake_sounder, player;

      fake_sounder = null;
      player = null;
      beforeEach(function() {
        fake_sounder = new FakeSounder;
        return player = new ac.Player(new data_source_class, fake_sounder);
      });
      it('works out for how long to sound each datum', function() {
        return (expect(player.interval)).toBe(interval);
      });
      return it('makes calls appropriate to play the sound', function() {
        var result;

        spyOn(fake_sounder, 'start');
        spyOn(fake_sounder, 'frequency');
        spyOn(fake_sounder, 'stop');
        result = 42;
        runs(function() {
          return result = player.play();
        });
        waits(5000);
        return runs(function() {
          (expect(fake_sounder.start)).toHaveBeenCalled();
          (expect(fake_sounder.frequency.callCount)).toBe(call_count);
          return (expect(fake_sounder.stop)).toHaveBeenCalled();
        });
      });
    });
  };

  describe('Player', function() {
    mixin_data_source('instantiated with short fake data source', ShortFakeDataSource, 1250, 4);
    return mixin_data_source('instantiated with long fake data source', LongFakeDataSource, 50, 100);
  });

}).call(this);
