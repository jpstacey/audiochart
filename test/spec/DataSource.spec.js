// Generated by CoffeeScript 1.6.2
(function() {
  var FakeDataWrapper, FakePitchMapper, ac;

  if (typeof exports !== "undefined" && exports !== null) {
    ac = require('../audiochart');
  } else {
    ac = window;
  }

  FakeDataWrapper = (function() {
    function FakeDataWrapper(data) {
      this.data = data;
      this.fakedata = [2, 3, 3, 4];
    }

    FakeDataWrapper.prototype.num_series = function() {
      return 1;
    };

    FakeDataWrapper.prototype.series_names = function() {
      return ['Test'];
    };

    FakeDataWrapper.prototype.series_value = function(series, index) {
      return this.fakedata[index];
    };

    FakeDataWrapper.prototype.series_length = function(series) {
      return 4;
    };

    return FakeDataWrapper;

  })();

  FakePitchMapper = (function() {
    function FakePitchMapper(minimum_datum, maximum_datum) {
      this.minimum_datum = minimum_datum;
      this.maximum_datum = maximum_datum;
    }

    FakePitchMapper.prototype.map = function(datum) {
      return -datum;
    };

    return FakePitchMapper;

  })();

  describe('DataSource', function() {
    var data;

    data = null;
    beforeEach(function() {
      return data = new ac.DataSource(new FakeDataWrapper(null), new FakePitchMapper);
    });
    it('can get the number of series', function() {
      return (expect(data.num_series())).toBe(1);
    });
    it('can get series names', function() {
      return (expect(data.series_names())).toEqual(['Test']);
    });
    xit('can get the min and max value of data in a series', function() {});
    it('can get values of data in a series', function() {
      (expect(data.series_value(0, 0))).toBe(-2);
      (expect(data.series_value(0, 1))).toBe(-3);
      (expect(data.series_value(0, 2))).toBe(-3);
      return (expect(data.series_value(0, 3))).toBe(-4);
    });
    return it('reports its length', function() {
      return (expect(data.series_length(0))).toBe(4);
    });
  });

}).call(this);
