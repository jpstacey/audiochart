/* audiochart 2015-11-17
MIT licence */

!function(exports) {
    var GoogleDataWrapper = (function() {
        function DataWrapper(data) {
            throw Error("Please use a derived object.");
        }
        return DataWrapper.prototype.num_series = function() {}, DataWrapper.prototype.series_names = function() {}, 
        DataWrapper.prototype.series_min = function(series) {}, DataWrapper.prototype.series_max = function(series) {}, 
        DataWrapper.prototype.series_value = function(series, index) {}, DataWrapper.prototype.series_length = function(series) {}, 
        DataWrapper;
    }(), function() {
        function GoogleDataWrapper(data) {
            this.data = data;
        }
        return GoogleDataWrapper.prototype.num_series = function() {
            return this.data.getNumberOfColumns() - 1;
        }, GoogleDataWrapper.prototype.series_names = function() {
            var i, _i, _ref, _results;
            for (_results = [], i = _i = 1, _ref = this.data.getNumberOfColumns() - 1; _ref >= 1 ? _ref >= _i : _i >= _ref; i = _ref >= 1 ? ++_i : --_i) _results.push(this.data.getColumnLabel(i));
            return _results;
        }, GoogleDataWrapper.prototype.series_min = function(series) {
            return this.data.getColumnRange(series + 1).min;
        }, GoogleDataWrapper.prototype.series_max = function(series) {
            return this.data.getColumnRange(series + 1).max;
        }, GoogleDataWrapper.prototype.series_value = function(series, index) {
            return this.data.getValue(index, series + 1);
        }, GoogleDataWrapper.prototype.series_length = function(series) {
            return this.data.getNumberOfRows();
        }, GoogleDataWrapper;
    }()), JSONDataWrapper = function() {
        function JSONDataWrapper(json) {
            if ("string" == typeof json) this.object = JSON.parse(json); else {
                if ("object" != typeof json) throw Error("Please provide a JSON string or derived object.");
                this.object = json;
            }
        }
        return JSONDataWrapper.prototype.num_series = function() {
            return this.object.data.length;
        }, JSONDataWrapper.prototype.series_names = function() {
            var chunk, _i, _len, _ref, _results;
            for (_ref = this.object.data, _results = [], _i = 0, _len = _ref.length; _len > _i; _i++) chunk = _ref[_i], 
            _results.push(chunk.series);
            return _results;
        }, JSONDataWrapper.prototype.series_min = function(series) {
            return Math.min.apply(this, this.object.data[series].values);
        }, JSONDataWrapper.prototype.series_max = function(series) {
            return Math.max.apply(this, this.object.data[series].values);
        }, JSONDataWrapper.prototype.series_value = function(series, index) {
            return this.object.data[series].values[index];
        }, JSONDataWrapper.prototype.series_length = function(series) {
            return this.object.data[series].values.length;
        }, JSONDataWrapper;
    }(), HTMLTableDataWrapper = function() {
        function HTMLTableDataWrapper(table) {
            if (this.table = table, !this.table) throw Error("No table given.");
        }
        return HTMLTableDataWrapper.prototype.num_series = function() {
            return this.table.getElementsByTagName("tr")[0].children.length;
        }, HTMLTableDataWrapper.prototype.series_names = function() {
            var element, _i, _len, _ref, _results;
            for (_ref = this.table.getElementsByTagName("th"), _results = [], _i = 0, _len = _ref.length; _len > _i; _i++) element = _ref[_i], 
            _results.push(element.textContent);
            return _results;
        }, HTMLTableDataWrapper.prototype._series_floats = function(series) {
            var element, _i, _len, _ref, _results;
            for (_ref = this.table.getElementsByTagName("td"), _results = [], _i = 0, _len = _ref.length; _len > _i; _i++) element = _ref[_i], 
            _results.push(parseFloat(element.textContent));
            return _results;
        }, HTMLTableDataWrapper.prototype.series_min = function(series) {
            return Math.min.apply(this, this._series_floats(series));
        }, HTMLTableDataWrapper.prototype.series_max = function(series) {
            return Math.max.apply(this, this._series_floats(series));
        }, HTMLTableDataWrapper.prototype.series_value = function(series, index) {
            return parseFloat(this.table.getElementsByTagName("tr")[index + 1].children[series].textContent);
        }, HTMLTableDataWrapper.prototype.series_length = function(series) {
            return this.table.getElementsByTagName("tr").length - 1;
        }, HTMLTableDataWrapper;
    }(), PitchMapper = function() {
        function PitchMapper(minimum_datum, maximum_datum) {
            if (this.minimum_datum = minimum_datum, this.maximum_datum = maximum_datum, this.minimum_datum > this.maximum_datum) throw Error("minimum datum should be <= maximum datum");
        }
        return PitchMapper.prototype.map = function(datum) {}, PitchMapper;
    }(), FrequencyPitchMapper = function() {
        function FrequencyPitchMapper(minimum_datum, maximum_datum, minimum_frequency, maximum_frequency) {
            if (this.minimum_frequency = minimum_frequency, this.maximum_frequency = maximum_frequency, 
            PitchMapper.call(this, minimum_datum, maximum_datum), this.minimum_frequency > this.maximum_frequency) throw Error("minimum frequency should be <= maximum frequency");
            this.data_range = this.maximum_datum - this.minimum_datum;
        }
        return FrequencyPitchMapper.prototype = Object.create(PitchMapper.prototype), FrequencyPitchMapper.prototype.constructor = FrequencyPitchMapper, 
        FrequencyPitchMapper.prototype.map = function(datum) {
            var ratio;
            return ratio = this.data_range ? (datum - this.minimum_datum) / this.data_range : .5, 
            this.minimum_frequency + ratio * (this.maximum_frequency - this.minimum_frequency);
        }, FrequencyPitchMapper;
    }(), WebAudioSounder = (function() {
        function NotePitchMapper() {
            return PitchMapper.apply(this, arguments);
        }
        return NotePitchMapper.prototype = Object.create(PitchMapper.prototype), NotePitchMapper.prototype.constructor = NotePitchMapper, 
        NotePitchMapper;
    }(), function() {
        function WebAudioSounder(context) {
            this.context = context, this.oscillator = this.context.createOscillator();
        }
        return WebAudioSounder.prototype.start = function() {
            this.oscillator.connect(this.context.destination), this.oscillator.start(0);
        }, WebAudioSounder.prototype.frequency = function(frequency, offset) {
            var callback = function(that) {
                return function() {
                    that.oscillator.frequency.value = frequency;
                };
            }(this);
            setTimeout(callback, offset);
        }, WebAudioSounder.prototype.stop = function(offset) {
            this.oscillator.stop(this.context.currentTime + offset);
        }, WebAudioSounder;
    }()), Player = function() {
        function Player(duration, data, pitch_mapper, sounder, visual_callback) {
            this.data = data, this.pitch_mapper = pitch_mapper, this.sounder = sounder, arguments.length < 5 ? this.visual_callback = null : this.visual_callback = visual_callback, 
            this.interval = duration / this.data.series_length(0);
        }
        return Player.prototype.play = function() {
            var i, offset, series_length, series_max_index, _i;
            for (series_length = this.data.series_length(0), series_max_index = series_length - 1, 
            this.sounder.start(0), null !== this.visual_callback && this.visual_callback(0, 0), 
            this.sounder.frequency(this.pitch_mapper.map(this.data.series_value(0, 0))), i = _i = 1; series_max_index >= 1 ? series_max_index >= _i : _i >= series_max_index; i = series_max_index >= 1 ? ++_i : --_i) offset = this.interval * i, 
            null !== this.visual_callback && this._highlight_enqueue(0, i, offset), this.sounder.frequency(this.pitch_mapper.map(this.data.series_value(0, i)), offset);
            this.sounder.stop(series_length * this.interval / 1e3);
        }, Player.prototype._highlight_enqueue = function(series, row, offset) {
            var callback = function(that) {
                return function() {
                    that.visual_callback(series, row);
                };
            }(this);
            setTimeout(callback, offset);
        }, Player;
    }(), AudioChart = function() {
        function AudioChart(options, context) {
            var fail = "Sorry, your browser doesn't support the Web Audio API.";
            if (arguments.length < 2 && (context = AudioContextGetter.get(), null === context)) throw Error(fail);
            return _AudioChart(options, context);
        }
        return AudioChart;
    }(), _AudioChart = function() {
        function _AudioChart(options, context) {
            var callback, data_wrapper, frequency_pitch_mapper, player, sounder;
            switch (data_wrapper = null, callback = null, options.type) {
              case "google":
                data_wrapper = new GoogleDataWrapper(options.data), null !== options.chart && (callback = google_visual_callback_maker(options.chart));
                break;

              case "json":
                data_wrapper = new JSONDataWrapper(options.data);
                break;

              case "html_table":
                data_wrapper = new HTMLTableDataWrapper(options.table), null !== options.highlight_class && (callback = html_table_visual_callback_maker(options.table, options.highlight_class));
                break;

              case "test":
                return;

              default:
                throw Error("Invalid data type '" + options.type + "' given.");
            }
            frequency_pitch_mapper = new FrequencyPitchMapper(data_wrapper.series_min(0), data_wrapper.series_max(0), options.frequency_low, options.frequency_high), 
            sounder = new WebAudioSounder(context), player = new Player(options.duration, data_wrapper, frequency_pitch_mapper, sounder, callback), 
            player.play();
        }
        return _AudioChart;
    }(), AudioContextGetter = function() {
        function AudioContextGetter() {}
        var audio_context = null, _get_audio_context = function() {
            return void 0 !== window.AudioContext ? new window.AudioContext() : void 0 !== window.webkitAudioContext ? new window.webkitAudioContext() : null;
        };
        return AudioContextGetter.get = function() {
            return null !== audio_context ? audio_context : audio_context = _get_audio_context();
        }, AudioContextGetter;
    }(), google_visual_callback_maker = function(chart) {
        return function(series, row) {
            chart.setSelection([ {
                row: row,
                column: series + 1
            } ]);
        };
    }, html_table_visual_callback_maker = function(table, class_name) {
        return function(series, row) {
            var cell, _i, _len, _ref;
            for (_ref = table.getElementsByTagName("td"), _i = 0, _len = _ref.length; _len > _i; _i++) cell = _ref[_i], 
            cell.className = "";
            cell = table.getElementsByTagName("td")[row], cell.className = class_name;
        };
    };
    exports.AudioChart = AudioChart;
}(window);
//# sourceMappingURL=audiochart.min.js.map